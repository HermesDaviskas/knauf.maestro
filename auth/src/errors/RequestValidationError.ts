import { CustomError, Status, CustomErrorJSON } from "./CustomError";
import { ValidationError } from "express-validator";

/**
 * @file errors/RequestValidationError.ts
 *
 * This file defines the `RequestValidationError` class, which extends the base `CustomError` class.
 * It is used to represent validation errors that occur during the processing of incoming requests.
 * Typically, this error is thrown when the validation rules defined via `express-validator` fail.
 *
 * Key Responsibilities:
 *  - Inherits from `CustomError` to provide a consistent structure for error handling across the application.
 *  - Contains an array of validation errors that can be directly derived from the `express-validator` library.
 *  - Provides a `toJSON()` method to return the validation errors as a structured JSON response.
 *
 * Usage Example:
 *
 * const validationErrors = [
 *   { msg: "Username is required", param: "username", location: "body" },
 *   { msg: "Password must be at least 6 characters", param: "password", location: "body" }
 * ];
 * const error = new RequestValidationError(validationErrors);
 * return res.status(error.status[0]).json(error.toJSON());
 *
 */

export class RequestValidationError extends CustomError {
  /**
   * Represents the HTTP status for this error.
   * In this case, it corresponds to a 400 Bad Request Error,
   * indicating that the request was invalid due to validation failures.
   */
  public status: Status = [400, "Bad Request - Validation Error"];

  /**
   * Creates a new instance of the `RequestValidationError` class.
   *
   * @param messages - An array of validation error messages provided by `express-validator`.
   * Each message object contains details about the validation issue, such as the field, message, and location.
   */
  constructor(public messages: ValidationError[]) {
    // Pass the stringified validation errors to the parent `CustomError` constructor.
    super(JSON.stringify(messages));
    Object.setPrototypeOf(this, RequestValidationError.prototype); // Ensure the correct prototype chain
  }

  /**
   * Converts the validation error into a structured JSON response format.
   *
   * @returns A `CustomErrorJSON` object containing:
   *  - success: false (indicating failure)
   *  - status: The HTTP status code and description (400, "Bad Request - Validation Error")
   *  - messages: An array of validation error messages generated by `express-validator`.
   */
  toJSON(): CustomErrorJSON {
    return {
      success: false, // Indicates failure
      status: this.status, // The HTTP status code and description
      messages: this.messages, // The array of validation error messages
    };
  }
}
